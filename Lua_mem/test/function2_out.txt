call freeobj
call freeobj
call freeobj
VARARGPREP
SETTABUP
  value name: INF, rc: 1001001001
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
CLOSURE
  pushclosure
    luaF_newLclosure
      luaC_newobj
        luaM_malloc_
        malloc 64 Byte
SETTABUP
  value name: max, rc: 465616192
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
CLOSURE
  pushclosure
    luaF_newLclosure
      luaC_newobj
        luaM_malloc_
        malloc 72 Byte
SETTABUP
  value name: get_max, rc: 465619216
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
NEWTABLE
  log2(hash size) + 1: 0, array size 0
  luaH_new
    luaC_newobj
      luaM_malloc_
      malloc 88 Byte
    setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
SETTABUP
  value name: A, rc: 465616400
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
LOADI
  R[0] := 1
  R[0]
LOADI
  R[1] := 1000
  R[1]
LOADI
  R[2] := 1
  R[2]
FORPREP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          malloc 40 Byte
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          malloc 40 Byte
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          malloc 80 Byte
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          malloc 160 Byte
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          malloc 320 Byte
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          malloc 640 Byte
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          malloc 1280 Byte
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          malloc 2560 Byte
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          malloc 5120 Byte
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          malloc 10240 Byte
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          malloc 20480 Byte
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: A
  R[4] := TAB[0][K[C]:A]
GETTABUP
  key name: math
  R[5] := TAB[0][K[C]:math]
GETFIELD
LOADI
  R[6] := 1000
  R[6]
CALL
SETTABLE
  luaV_finishset
  loop 0
  is table
    luaH_newkey
    cannot find a free place
      rehash
        luaH_resize
          setnodevector (Creates an array for the hash part of a table with the given size, or reuses the dummy node if size is zero)
          luaM_realloc_
          freehash
      luaH_set
FORLOOP
GETTABUP
  key name: get_max
  R[0] := TAB[0][K[C]:get_max]
GETTABUP
  key name: A
  R[1] := TAB[0][K[C]:A]
CALL
LEN
SETTABUP
  value name: size, rc: 1000
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
GETTABUP
  key name: INF
  R[1] := TAB[0][K[C]:INF]
UNM
SETTABUP
  value name: ret, rc: -1001001001
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
LOADI
  R[1] := 1
  R[1]
GETTABUP
  key name: size
  R[2] := TAB[0][K[C]:size]
LOADI
  R[3] := 1
  R[3]
FORPREP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
BPUSH
  push imp taint to vstack, tail:0
RETURN1
SETTABUP
  value name: ret, rc: 890
  fastset: key ret, rc 890
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 890
  fastset: key ret, rc 890
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 890
  fastset: key ret, rc 890
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 890
  fastset: key ret, rc 890
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 890
  fastset: key ret, rc 890
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 890
  fastset: key ret, rc 890
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 890
  fastset: key ret, rc 890
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 890
  fastset: key ret, rc 890
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 890
  fastset: key ret, rc 890
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 890
  fastset: key ret, rc 890
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
BPUSH
  push imp taint to vstack, tail:0
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 963
  fastset: key ret, rc 963
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
BPUSH
  push imp taint to vstack, tail:0
RETURN1
SETTABUP
  value name: ret, rc: 974
  fastset: key ret, rc 974
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 974
  fastset: key ret, rc 974
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 974
  fastset: key ret, rc 974
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 974
  fastset: key ret, rc 974
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 974
  fastset: key ret, rc 974
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 974
  fastset: key ret, rc 974
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 974
  fastset: key ret, rc 974
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 974
  fastset: key ret, rc 974
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 974
  fastset: key ret, rc 974
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 974
  fastset: key ret, rc 974
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 974
  fastset: key ret, rc 974
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
BPUSH
  push imp taint to vstack, tail:0
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 978
  fastset: key ret, rc 978
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
BPUSH
  push imp taint to vstack, tail:0
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 985
  fastset: key ret, rc 985
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
BPUSH
  push imp taint to vstack, tail:0
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 997
  fastset: key ret, rc 997
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
BPUSH
  push imp taint to vstack, tail:0
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: max
  R[5] := TAB[0][K[C]:max]
GETTABUP
  key name: ret
  R[6] := TAB[0][K[C]:ret]
GETTABLE
CALL
LT
  if ((R[1] < R[0]) ~= 0) then pc++
RETURN1
SETTABUP
  value name: ret, rc: 998
  fastset: key ret, rc 998
FORLOOP
GETTABUP
  key name: ret
  R[1] := TAB[0][K[C]:ret]
RETURN1
SETTABUP
  value name: ans, rc: 998
  luaV_finishset
  loop 0
  is table
  no previous entry
    luaH_newkey
GETTABUP
  key name: print
  R[0] := TAB[0][K[C]:print]
GETTABUP
  key name: ans
  R[1] := TAB[0][K[C]:ans]
CALL
call freeobj
998
RETURN
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
call freeobj
